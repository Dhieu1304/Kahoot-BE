#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('kahoot-be:server');
const http = require('http');
const sequelize = require('../config/database.config');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const { Server } = require("socket.io");
const io = new Server(server, { cors: { origin: '*'} });
const presentationSocket = require("../components/socket/presentation.socket");
const chatSocket = require("../components/socket/chat.socket");
const questionSocket = require("../components/socket/question.socket");
const {PRESENTATION_EVENT, SOCKET_EVENT} = require("../components/socket/socket.constant");
const users = require('../components/socket/socketUser').getInstance();
const presentations = require('../components/socket/socketPresentation').getInstance();

io.on('connection', (socket) => {
  console.log('a user connected');
  presentationSocket(io, socket);
  chatSocket(io, socket);
  questionSocket(io, socket);
  socket.on('disconnect', () => {
    const user = users.findCurrentUserBySocketId(socket.id);
    if (user) {
      users.userDisconnect(socket.id);
      const presentation = presentations.findCurrentSlideByPresentationId(user?.presentation_id);
      if (presentation) {
        io.in(presentation.presentation_id.toString()).emit(PRESENTATION_EVENT.COUNT_ONL, users.countUserInRoom(presentation?.code));
        if (presentation?.user_id === user.user_id) {
          console.log("================ STOP_PRESENT ========================");
          const removePresent = presentations.removePresentation(presentation.presentation_id, presentation.user_id);
          if (!removePresent) {
            return socket.emit(SOCKET_EVENT.ERROR, 'You do not have permission');
          }
          io.in(presentation.code.toString()).emit(PRESENTATION_EVENT.SLIDE, 'The host is stop slideshow');
          io.in(presentation.presentation_id.toString()).emit(PRESENTATION_EVENT.STOP_PRESENT, 'The host is stop slideshow');
        }
      }
    }
    console.log('user disconnected');
  });
});

global._io = io;

/**
 * Listen on provided port, on all network interfaces.
 */

(async () => {
  try {
    await sequelize.authenticate();
    console.log('Connection has been established successfully.');

    server.listen(port, () => {
      console.log(`Server is running on the port : http://localhost:${port}`);
    })

    server.on('error', onError);
    server.on('listening', onListening);

  } catch (error) {
    console.error('Unable to connect to the database:', error);
  }
})();

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
